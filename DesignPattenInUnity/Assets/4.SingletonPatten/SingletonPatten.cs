using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingletonPatten : MonoBehaviour
{
    // 싱글톤 패턴
    // 왜 싱글톤 패턴을 사용하는가?
    // 1. 고정된 메모리 영역을 얻으면서 한번의 new로 인스턴스를 사용하기 때문에 메모리 낭비를 방지 할 수 있음.
    // 2. 런타임에 초기화된다. > 싱글턴은 최대한 늦게 초기화됨
    // 3. 싱글톤을 상속 할 수 있다.
    // 4. 전역 인스턴스이기 때문에 다른 클래스의 인스턴스들이 데이터를 공유하기 쉽다.

    // 싱글톤 패턴의 문제점
    // 1. 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간의 결합도가 높아져
    // "개방-패쇄 원칙"을 위배하게 됨.
    // 2. 멀티쓰레드 환경에서 동기화 처리를 안하면 인스턴스가 두개 이상이 생기는 문제가 발생 할 수 있음.
}
