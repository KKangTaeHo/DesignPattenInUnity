using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DoubleBufferPatten : MonoBehaviour
{
    // 일단 '버퍼'란 무엇인가?
    // 코딩을 하면서 '버퍼'라는 말을 자주 듣지만 그냥 '버퍼'라고 이해하고 넘어갔었다.
    // '버퍼'는 데이터를 한곳에서 다른 곳으로 전송 하는 동안 일시적으로 그 데이터를 보관하는 메모리영역이다.
    // > 쉽게 말해서 '임시 저장 공간'
    
    // 그럼 '버퍼링'이란?
    // 버퍼를 채우는 동작을 의미함.

    // '프래임 버퍼'란? 무엇인가?
    // 화면에 그려질 화면 전체에 대한 정보를 담는 공간, 메모리(메모리에 할당된 픽셀들의 배열)
    // 해상도에 그려질 화면에 대한 정보를 담는 곳

    // 일반적으로 비디오 카드에서는
    // GPU <> 프레임 버퍼 > 비디오 컨트롤러 > 화면
    // 요런식으로 구성이 되어있는데,
    // GPU는 그려질 화면을 프레임버퍼에 쓰는 일을하고, 비디오 컨트롤러는 그려진 화면을 출력하는 일을 한다.
    
    // 그런데!
    // 'GPU가 프레임 버퍼에 쓰는 작업은 비디오 컨트롤러가 프레임 버퍼를 읽는 속도에 비해 훨씬 느리기' 때문에
    // 깜빡거리는 현상이 발생하곤 한다.

    // 이 문제를 극복하기 위해 '이중 버퍼'가 필요하다.

    // 이중 버퍼링(더블버퍼링)
    // 프론트 버퍼, 백퍼버 이렇게 2개를 만들어 사용함.
    // 비디오 컨트롤러가 프론트버퍼를 읽는동안, GPU는 백버퍼에 다음에 그려질 내용을 쓴다.
    // GPU가 백버퍼에 내용을 다 썻다면, 비디오 컨트롤러가 백버퍼로 스위칭 후 새로운 내용을 화면에 그린다.
    // 동시에 GPU는 프론트버퍼로 스위칭하며, 프론트버퍼에 그려질 내용을 다시 쓴다.

    // 이중 버퍼 패턴은 언제쓰는게 좋을 것인가?
    // 1. 순차적으로 변경해야 하는 상태가 있다.
    // 2. 이 상태는 변경 도중에도 접그이 가능해야 한다.
    // 3. 바깥 코드에서는 작업 중인 상태에 접근 할 수 없어야한다.
    // 4. 상태에 값을 쓰는 도중에도 기다리지 않고 바로 접근 할 수 있어야 한다.
    // 요 조건을 만족 하는 경우, 이중 버퍼 패턴을 쓰면 좋다.

    // 이중 버퍼 패턴의 단점
    // 1. 교체 연산 자체에 시간이 걸린다.
    // 2. 버퍼가 두개 필요하다 > 메모리가 더 필요함.
}
